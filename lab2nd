
#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <semaphore.h>

#define CREATE_PROCESS 5

sem_t semaphore;

void* routine(void* args) {
    sem_wait(&semaphore);
    sleep(1);
    printf("Hello from process %d\n", *(int*)args);
    sem_post(&semaphore);
    free(args);
}

int main(int argc, char *argv[]) {
    pthread_t th[CREATE_PROCESS];
    sem_init(&semaphore, 1, 1);
    int i;
    for (i = 1; i < CREATE_PROCESS; i++) {
        int* a = malloc(sizeof(int));
        *a = i;
        if (pthread_create(&th[i], NULL, &routine, a) != 0) {
            perror("Failed to create process");
        }
    }

    for (i = 1; i < CREATE_PROCESS; i++) {
        if (pthread_join(th[i], NULL) != 0) {
            perror("Failed to join process");
        }
    }
    sem_destroy(&semaphore);
    return 0;
}

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>
int main(int argc, char *argv[]) {
 printf("hello world (pid:%d)\n", (int) getpid());
 int rc = fork();
 if (rc < 0) {
   fprintf(stderr, "fork failed\n");
   exit(1);
 } else if (rc == 0) {
   printf("hello, I am child (pid:%d)\n", (int) getpid());
 } else {
   int wc = wait(NULL);
   printf("hello, I am parent of %d (wc:%d) (pid:%d)\n", rc, wc, (int) getpid());
 }
 return 0;
}


#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/wait.h>

int main(int argc, char *argv[]) {
 printf("hello world (pid:%d)\n", (int) getpid());
 int rc = fork();
 if (rc < 0) {
   fprintf(stderr, "fork failed\n");
   exit(1);
 } else if (rc == 0) {
   printf("hello, I am child (pid:%d)\n", (int) getpid());
   char *myargs[3];
   myargs[0] = strdup("wc");
   myargs[1] = strdup("p4.c");
   myargs[2] = NULL;
   execvp(myargs[0], myargs);
   printf("this shouldn't print out");
 } else {
   int wc = wait(NULL);
   printf("hello, I am parent of %d (wc:%d) (pid:%d)\n", rc, wc, (int) getpid());
 }
 return 0;
}

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <fcntl.h>
#include <sys/wait.h>

int main(int argc, char *argv[]) {
 printf("hello world (pid:%d)\n", (int) getpid());
 int rc = fork();
 if (rc < 0) {
   fprintf(stderr, "fork failed\n");
   exit(1);
 } else if (rc == 0) {
   close(STDOUT_FILENO); //close standard output
   open("./p4.output", O_CREAT | O_WRONLY | O_TRUNC, S_IRWXU); // open a file for showing output
   char *myargs[3];
   myargs[0] = strdup("wc");
   myargs[1] = strdup("p4.c");
   myargs[2] = NULL;
   execvp(myargs[0], myargs);
 } else {
   int wc = wait(NULL);
 }
 return 0;
}


#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main(int argc, char *argv[]) {
 printf("hello world (pid:%d)\n", (int) getpid());

 int rc = fork();
 if (rc < 0) { //fork fails
   fprintf(stderr, "fork failed\n");
 } else if (rc == 0) { //new process (children)
   printf("hello, I am child (pid:%d)\n", (int) getpid());
 } else {  // parent(the main process)
   printf("hello, I am parent of %d (pid:%d)\n", rc, (int) getpid());
 }
 return 0;
}


 i am shahin
This is work of lab 1
